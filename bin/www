#!/usr/bin/env node
const debug = require('debug')('millegrilles:publication:www')
const express = require('express')

const socketApp = require('../models/publicationSocketApp')
const amqpdao = require('../models/amqpdao')
const server4 = require('@dugrema/millegrilles.common/lib/server4')
const {initialiser: initialiserPublication} = require('../routes/publication')

const { extraireExtensionsMillegrille } = require('@dugrema/millegrilles.common/lib/forgecommon')

async function init() {

  // Initialiser server et routes
  const app = express()
  const {server, socketIo, amqpdao: amqpdaoInst} = await server4(
    app, socketApp.configurerEvenements, {pathApp: '/publication', verifierAutorisation})

  const routePublication = express.Router()
  app.use('/publication', routePublication)

  routePublication.use(initialiserPublication(amqpdaoInst))
  routePublication.use(express.static('static/'))

}

function verifierAutorisation(socket, securite, certificatForge) {
  debug("Verifier autorisation cert %O", certificatForge)
  if(securite === '3.protege') {
    const extensions = extraireExtensionsMillegrille(certificatForge)
    debug("www.verifierAutorisation extensions %O", extensions)

    // Deleguation globale donne tous les acces
    if(['proprietaire', 'delegue'].includes(extensions.delegationGlobale)) {
      debug("Usager proprietaire, acces 3.protege OK")
      return true
    }

    // Delegation au domaine coupdoeil
    if(extensions.delegationsDomaines.includes('publication')) {
      debug("Usager delegue domaine coupdoeil, acces 3.protege OK")
      return true
    }

    debug("Usager acces 3.protege refuse")
  }
  return false
}

init()
